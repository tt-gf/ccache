srcdir = @srcdir@
builddir = @builddir@
VPATH = @srcdir@

EXEC=ccache
UNAME_S := $(shell uname -s)

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
mandir = @mandir@
datarootdir = @datarootdir@
sysconfdir = @sysconfdir@
installcmd = @INSTALL@

AR = @AR@
BASH = @BASH@
CC = @CC@
CFLAGS = @CFLAGS@
CPPFLAGS = @CPPFLAGS@
EXEEXT = @EXEEXT@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
RANLIB = @RANLIB@

all_cflags = $(CFLAGS)
all_cppflags = @DEFS@ -DSYSCONFDIR=$(sysconfdir) -I. -I$(srcdir)/src -I$(builddir)/unittest $(CPPFLAGS)
extra_libs = @extra_libs@

non_3pp_sources = \
    src/args.c \
    src/ccache.c \
    src/cleanup.c \
    src/compopt.c \
    src/conf.c \
    src/counters.c \
    src/execute.c \
    src/exitfn.c \
    src/hash.c \
    src/hashutil.c \
    src/language.c \
    src/lockfile.c \
    src/manifest.c \
    src/mdfour.c \
    src/memccached.c \
    src/stats.c \
    src/unify.c \
    src/util.c
generated_sources = \
    src/version.c
3pp_sources = \
    src/getopt_long.c \
    src/hashtable.c \
    src/hashtable_itr.c \
    src/murmurhashneutral2.c \
    src/snprintf.c
base_sources = $(non_3pp_sources) $(generated_sources) $(3pp_sources)
base_objs = $(base_sources:.c=.o)

ccache_sources = src/main.c $(base_sources)
ccache_objs = $(ccache_sources:.c=.o)

zlib_sources = \
    src/zlib/adler32.c \
    src/zlib/crc32.c \
    src/zlib/deflate.c \
    src/zlib/gzclose.c \
    src/zlib/gzlib.c \
    src/zlib/gzread.c \
    src/zlib/gzwrite.c \
    src/zlib/inffast.c \
    src/zlib/inflate.c \
    src/zlib/inftrees.c \
    src/zlib/trees.c \
    src/zlib/zutil.c

zlib_objs = $(zlib_sources:.c=.o)

test_suites = @test_suites@
test_sources = unittest/main.c unittest/framework.c unittest/util.c
test_sources += $(test_suites)
test_objs = $(test_sources:.c=.o)

all_sources = $(ccache_sources) $(test_sources)
all_objs = $(ccache_objs) $(test_objs) $(zlib_objs)

files_to_clean = \
    $(all_objs) \
    $(EXEC)$(EXEEXT) \
    src/*~ \
    src/zlib/libz.a \
    testdir.* \
    unittest/run$(EXEEXT) \
    bundle/$(EXEC)*.app \
    bundle/$(EXEC)*.dmg \
    *~

files_to_distclean = Makefile config.h config.log config.status

.PHONY: all
all: $(EXEC)$(EXEEXT)

$(EXEC)$(EXEEXT): $(ccache_objs) $(extra_libs)
	$(CC) $(all_cflags) -o $@ $(ccache_objs) $(LDFLAGS) $(extra_libs) $(LIBS)

$(EXEC).1: doc/$(EXEC).1
	cp $< $@

.PHONY: install
install: $(EXEC)$(EXEEXT) $(EXEC).1
	$(installcmd) -d $(DESTDIR)$(bindir)
	$(installcmd) -m 755 $(EXEC)$(EXEEXT) $(DESTDIR)$(bindir)
	$(installcmd) -d $(DESTDIR)$(mandir)/man1
	-$(installcmd) -m 644 $(EXEC).1 $(DESTDIR)$(mandir)/man1/

.PHONY: clean
clean:
	rm -rf $(files_to_clean)

conf.c: confitems_lookup.c envtoconfitems_lookup.c

$(zlib_objs): CPPFLAGS += -include config.h

src/zlib/libz.a: $(zlib_objs)
	$(AR) cr $@ $(zlib_objs)
	$(RANLIB) $@

.PHONY: perf
perf: $(EXEC)$(EXEEXT)
	$(srcdir)/perf/perf.py --ccache $(EXEC)$(EXEEXT) $(CC) $(all_cppflags) $(all_cflags) $(srcdir)/src/ccache.c

.PHONY: test
test: $(EXEC)$(EXEEXT) unittest/run$(EXEEXT)
	unittest/run$(EXEEXT)
	CC='$(CC)' @ccache_memcached@$(BASH) $(srcdir)/test/run

.PHONY: unittest
unittest: unittest/run$(EXEEXT)
	unittest/run$(EXEEXT)

unittest/run$(EXEEXT): $(base_objs) $(test_objs) $(extra_libs)
	$(CC) $(all_cflags) -o $@ $(base_objs) $(test_objs) $(LDFLAGS) $(extra_libs) $(LIBS)

unittest/main.o: unittest/suites.h

unittest/suites.h: $(test_suites) Makefile
	ls $^ | grep -v Makefile | xargs sed -n 's/TEST_SUITE(\(.*\))/SUITE(\1)/p' >$@

.PHONY: check
check: test

.PHONY: distclean
distclean: clean
	rm -rf $(files_to_distclean)

.PHONY: installcheck
installcheck: $(EXEC)$(EXEEXT) unittest/run$(EXEEXT)
	unittest/run$(EXEEXT)
	CCACHE=$(bindir)/$(EXEC) CC='$(CC)' $(BASH) $(srcdir)/test/run

.c.o:
	$(CC) $(all_cppflags) $(all_cflags) -c -o $@ $<

define plist
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>CFBundleExecutable</key>
    <string>EXEC</string>
    <key>CFBundleIdentifier</key>
    <string>org.samba.EXEC</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>EXEC</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
</dict>
</plist>
endef
export plist

.PHONY: package
package: install
	@echo
ifeq ($(UNAME_S),Darwin)
	@echo Building app bundle
	@rm -rf "bundle/"
	@mkdir -p "bundle/$(EXEC).app"/Contents/{MacOS,Resources,Frameworks}
	@echo $$plist > "bundle/$(EXEC).app"/Contents/Info.plist
	@cp $(EXEC) "bundle/$(EXEC).app/Contents/MacOS/$(EXEC)"
	@cp `otool -L "bundle/$(EXEC).app/Contents/MacOS/$(EXEC)" | grep -v "\/usr\/lib" | grep -v "\:" | awk '{print $$1,"bundle/$(EXEC).app/Contents/Frameworks"}'`
	@install_name_tool -change `otool -L "bundle/$(EXEC).app/Contents/MacOS/$(EXEC)" | grep -v "\/usr\/lib" | grep -v "\:" | awk '{print $$1; gsub(/^.*\//,"",$$1); print "@executable_path/../Frameworks/"$$1}'` "bundle/$(EXEC).app/Contents/MacOS/$(EXEC)"
	$(eval VERSION := $(shell ./$(EXEC) -V | grep 'ccache version' | awk '{ print $$3 }'))
	@echo Creating Disk Image
	@hdiutil create "bundle/$(EXEC)-$(VERSION).dmg" -volname "ccache" -srcfolder "bundle/$(EXEC).app"
endif

@include_dev_mk@
